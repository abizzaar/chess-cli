import test from 'ava';
import { computeMovesAsStringBoard } from './testUtils.js';

test('king basic', t => {
	const board = [
		["r", "h", "b", "q", "_k", "b", "h", "r"],
		["p", "p", "p", "p", " ", "p", "p", "p"],
		[" ", " ", " ", " ", "p", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		["P", "P", "P", "P", "P", "P", "P", "P"],
		["R", "H", "B", "Q", "K", "B", "H", "R"]
	]

	const actual = computeMovesAsStringBoard(
		board
	)

	const expected = [
		["r", "h", "b", "q", "k", "b", "h", "r"],
		["p", "p", "p", "p", "x", "p", "p", "p"],
		[" ", " ", " ", " ", "p", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		["P", "P", "P", "P", "P", "P", "P", "P"],
		["R", "H", "B", "Q", "K", "B", "H", "R"]
	]

	t.deepEqual(actual, expected)
})

test('king captures and blocked squares', t => {
	const board = [
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", "p", " ", " ", " ", " "],
		[" ", " ", " ", "p", "P", "R", " ", " "],
		[" ", " ", " ", " ", "_k", " ", " ", " "],
		[" ", " ", " ", " ", " ", "B", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "]
	]

	const actual = computeMovesAsStringBoard(board)

	const expected = [
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", "p", " ", " ", " ", " "],
		[" ", " ", " ", "p", "x", "x", " ", " "],
		[" ", " ", " ", "x", "k", "x", " ", " "],
		[" ", " ", " ", "x", "x", "x", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "]
	]

	// should capture on black pieces (uppercase), skip ally (lowercase)
	t.deepEqual(actual, expected)
})

test('king at corner has only in-bounds moves', t => {
	const board = [
		["_k", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "]
	]

	const actual = computeMovesAsStringBoard(board)

	const expected = [
		["k", "x", " ", " ", " ", " ", " ", " "],
		["x", "x", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "]
	]

	t.deepEqual(actual, expected)
})

test('king fully surrounded by allies has no moves', t => {
	const board = [
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", "p", "p", "p", " ", " ", " "],
		[" ", " ", "p", "_k", "p", " ", " ", " "],
		[" ", " ", "p", "p", "p", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "]
	]

	const actual = computeMovesAsStringBoard(board)

	const expected = [
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", "p", "p", "p", " ", " ", " "],
		[" ", " ", "p", "k", "p", " ", " ", " "],
		[" ", " ", "p", "p", "p", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " ", " ", " ", " "]
	]

	t.deepEqual(actual, expected)
})